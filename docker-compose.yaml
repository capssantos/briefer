services:
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: 'briefer'
      POSTGRES_USER: ${POSTGRES_USERNAME:?error}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?error}
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USERNAME:?error} -d briefer || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  db_migration:
    image: briefercloud/briefer-api
    build:
      context: '.'
      dockerfile: 'apps/api/Dockerfile'
    working_dir: '/app/packages/database'
    command: ['npx', 'prisma', 'migrate', 'deploy']
    environment:
      NODE_ENV: 'production'
      POSTGRES_PRISMA_URL: 'postgresql://${POSTGRES_USERNAME:?error}:${POSTGRES_PASSWORD:?error}@postgres:5432/briefer?schema=public'
    depends_on:
      postgres:
        condition: service_healthy

  jupyter_server:
    image: briefercloud/briefer-jupyter
    labels:
      'cloud.briefer.jupyter-container': 'true'
    build:
      context: 'apps/api'
      dockerfile: 'jupyter.Dockerfile'
    command:
      - 'sh'
      - '-c'
      - 'jupyter server --ip=0.0.0.0 --ZMQChannelsWebsocketConnection.iopub_data_rate_limit=1.0e10 --ZMQChannelsWebsocketConnection.iopub_msg_rate_limit=1.0e6 --ServerApp.max_body_size=107374182400'
    environment:
      JUPYTER_TOKEN: ${JUPYTER_TOKEN:?error}
    volumes:
      - jupyter:/home/jupyteruser
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:8888/api || exit 1']
      interval: 5s
      timeout: 10s
      retries: 5

  ai:
    image: briefercloud/briefer-ai
    build:
      context: 'ai'
      dockerfile: 'Dockerfile'
    environment:
      BASIC_AUTH_USERNAME: ${AI_BASIC_AUTH_USERNAME:?error}
      BASIC_AUTH_PASSWORD: ${AI_BASIC_AUTH_PASSWORD:?error}
      OPENAI_DEFAULT_MODEL_NAME: 'gpt-4o'
      OPENAI_API_KEY: ${OPENAI_API_KEY:?error}
      PORT: 8000
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:8000/ping || exit 1']
      interval: 5s
      timeout: 10s
      retries: 5

  web:
    image: briefercloud/briefer-web
    build:
      context: '.'
      dockerfile: 'apps/web/Dockerfile'
    environment:
      NODE_ENV: 'production'
    depends_on:
      api:
        condition: service_healthy

  api:
    image: briefercloud/briefer-api
    build:
      context: '.'
      dockerfile: 'apps/api/Dockerfile'
    environment:
      NODE_ENV: 'production'
      LOG_LEVEL: 'debug'
      API_URL: '/api'
      FRONTEND_URL: '/'
      LOGIN_JWT_SECRET: ${LOGIN_JWT_SECRET:?error}
      AUTH_JWT_SECRET: ${AUTH_JWT_SECRET:?error}
      AI_API_URL: 'http://ai:8000'
      AI_API_USERNAME: ${AI_BASIC_AUTH_USERNAME:?error}
      AI_API_PASSWORD: ${AI_BASIC_AUTH_PASSWORD:?error}
      PYTHON_ALLOWED_LIBRARIES: 'plotly,matplotlib,numpy,pandas'
      POSTGRES_USERNAME: ${POSTGRES_USERNAME:?error}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?error}
      POSTGRES_HOSTNAME: 'postgres'
      POSTGRES_PORT: '5432'
      POSTGRES_DATABASE: 'briefer'
      ENVIRONMENT_VARIABLES_ENCRYPTION_KEY: ${ENVIRONMENT_VARIABLES_ENCRYPTION_KEY:?error}
      WORKSPACE_SECRETS_ENCRYPTION_KEY: ${WORKSPACE_SECRETS_ENCRYPTION_KEY:?error}
      DATASOURCES_ENCRYPTION_KEY: ${DATASOURCES_ENCRYPTION_KEY:?error}
      JUPYTER_HOST: 'jupyter_server'
      JUPYTER_PORT: 8888
      JUPYTER_TOKEN: ${JUPYTER_TOKEN:?error}
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:8080/readyz || exit 1']
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      db_migration:
        condition: service_completed_successfully
      jupyter_server:
        condition: service_healthy
        restart: true
      ai:
        condition: service_healthy

  nginx:
    image: nginx:1.27
    depends_on:
      - web
      - api
    ports:
      - '80:3500'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always

volumes:
  jupyter:
  postgres_data:
